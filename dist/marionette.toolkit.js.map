{"version":3,"file":"marionette.toolkit.js","sources":["src/mixins/state.js","src/mixins/child-apps.js","src/mixins/event-listeners.js","src/app.js","src/component.js","src/marionette.toolkit.js"],"sourcesContent":["import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\n\nconst ClassOptions = [\n  'StateModel',\n  'stateEvents'\n];\n\n /**\n * This provides methods used for keeping state using a Backbone.Model. It's meant to\n * be used with either a Marionette.Object or Backbone.View.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * The model class for _stateModel.\n   * @type {Backbone.Model}\n   * @default Backbone.Model\n   */\n  StateModel: Backbone.Model,\n\n  /**\n   * @public\n   * @method initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   * @param {Object} [options.stateEvents] - Event hash bound from _stateModel to StateMixin.\n   * @param {Backbone.Model} [options.StateModel] - Model class for _stateModel.\n   */\n  initState(options = {}) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    // Remove event handlers from previous state\n    this._removeEventHandlers();\n\n    const StateModel = this._getStateModel(options);\n\n    this._stateModel = new StateModel(options.state);\n\n    this._setEventHandlers();\n\n    return this;\n  },\n\n  /**\n   * Unbind all entity events and remove any listeners on _stateModel\n   * Clean up destroy event handler\n   *\n   * @private\n   * @method _removeEventHandlers\n   */\n  _removeEventHandlers() {\n    if(!this._stateModel) return;\n\n    this.unbindEvents(this._stateModel);\n    this._stateModel.stopListening();\n    this.off('destroy', this._destroyState);\n  },\n\n  /**\n   * Bind events from the _stateModel defined in stateEvents hash\n   * Setup destroy event handle\n   *\n   * @private\n   * @method _setEventHandlers\n   */\n  _setEventHandlers() {\n    this.bindEvents(this._stateModel, _.result(this, 'stateEvents'));\n\n    this.on('destroy', this._destroyState);\n  },\n\n  /**\n   * Get the StateMixin StateModel class.\n   * Checks if the `StateModel` is a model class (the common case)\n   * Then check if it's a function (which we assume that returns a model class)\n   *\n   * @private\n   * @method _getStateModel\n   * @param {Object} [options] - Options that can be used to determine the StateModel.\n   * @returns {Backbone.Model}\n   */\n  _getStateModel(options) {\n    if(this.StateModel.prototype instanceof Backbone.Model || this.StateModel === Backbone.Model) {\n      return this.StateModel;\n    } else if(_.isFunction(this.StateModel)) {\n      return this.StateModel.call(this, options);\n    }\n\n    throw new Marionette.Error({\n      name: 'InvalidStateModelError',\n      message: '\"StateModel\" must be a model class or a function that returns a model class'\n    });\n  },\n\n  /**\n   * Set a property on the _stateModel.\n   *\n   * @public\n   * @method setState\n   * @param {String|Object} key - Attribute name or Hash of any number of key value pairs.\n   * @param {*} [value] - Attribute value if key is String, replaces options param otherwise.\n   * @param {Object} [options] - Backbone.Model options.\n   * @returns {Backbone.Model} - The _stateModel\n   */\n  setState() {\n    return this._stateModel.set.apply(this._stateModel, arguments);\n  },\n\n\n  /**\n   *  Reset _stateModel to defined defaults\n   *\n   * @public\n   * @method resetStateDefaults\n   * @param {Object} [newState] - Hash of any number of key value pairs.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  resetStateDefaults() {\n    const defaults = _.result(this._stateModel, 'defaults');\n\n    return this._stateModel.set(defaults);\n  },\n\n  /**\n   * Get a property from the _stateModel, or return the _stateModel\n   *\n   * @public\n   * @method getState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  getState(attr) {\n    if(!attr) {\n      return this._stateModel;\n    }\n\n    return this._stateModel.get.apply(this._stateModel, arguments);\n  },\n\n  /**\n   * Clean up any listeners on the _stateModel.\n   *\n   * @private\n   * @method _destroyState\n   */\n  _destroyState() {\n    this._stateModel.stopListening();\n  }\n};\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nconst ClassOptions = [\n  'childApps',\n  'childAppOptions'\n];\n\n /**\n * This provides methods used for \"App Manager\" functionality - the adding and removing child `App`s. It's not meant to\n * be used directly.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * @private\n   * @method _initChildApps\n   * @constructs ChildApps\n   * @param {Object} [options] - Settings for the ChildApps.\n   * @param {Object} [options.childApps] - Hash for setting up child apps.\n   * @param {Object} [options.childAppOptions] - Hash of options passed to every child app.\n   *\n   * ```js\n   * childApps: {\n   *   appName: {\n   *     AppClass: MyChildAppClass,\n   *     fooOption: true,\n   *     startWithParent: true\n   *   },\n   *   barApp: MyOtherChildAppClass\n   * }\n   * ```\n   */\n  _initChildApps(options = {}) {\n    this._childApps = {};\n\n    this.mergeOptions(options, ClassOptions);\n\n    let childApps = this.childApps;\n\n    if(childApps) {\n      if(_.isFunction(childApps)) {\n        childApps = childApps.call(this, options);\n      }\n\n      this.addChildApps(childApps);\n    }\n\n    this._initListeners();\n  },\n\n  /**\n   * The child apps should be handled while the app is running;\n   * After start, before stop, and before destroy.\n   *\n   * @private\n   * @method _initListeners\n   */\n  _initListeners() {\n    this.on({\n      'start': this._startChildApps,\n      'before:stop': this._stopChildApps,\n      'before:destroy': this._destroyChildApps\n    });\n  },\n\n  /**\n   * Starts `childApps` if allowed by child\n   *\n   * @private\n   * @method _startChildApps\n   */\n  _startChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(_.result(childApp, 'startWithParent')) {\n        childApp.start();\n      }\n    });\n  },\n\n  /**\n   * Stops `childApps` if allowed by child\n   *\n   * @private\n   * @method _stopChildApps\n   */\n  _stopChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(_.result(childApp, 'stopWithParent')) {\n        childApp.stop();\n      }\n    });\n  },\n\n  /**\n   * Starts `childApp`\n   *\n   * @param {String} appName - Name of childApp to start\n   * @param {object} options - Start options for app\n   * @public\n   * @method startChildApp\n   */\n  startChildApp(appName, options) {\n    this.getChildApp(appName).start(options);\n\n    return this;\n  },\n\n  /**\n   * Stops `childApp`\n   *\n   * @param {String} appName - Name of childApp to stop\n   * @public\n   * @method stopChildApp\n   */\n  stopChildApp(appName) {\n    this.getChildApp(appName).stop();\n\n    return this;\n  },\n\n  /**\n   * Destroys `childApps` if allowed by child\n   *\n   * @private\n   * @method _destroyChildApps\n   */\n  _destroyChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(!_.result(childApp, 'preventDestroy')) {\n        childApp.destroy();\n      }\n    });\n  },\n\n  /**\n   * Internal helper to instantiate and `App` from on `Object`\n   *\n   * @private\n   * @method _buildAppFromObject\n   * @param {Object} appConfig - `AppClass` and any other option for the `App`\n   * @returns {App}\n   */\n  _buildAppFromObject(appConfig) {\n    const AppClass = appConfig.AppClass;\n    const options = _.omit(appConfig, 'AppClass');\n\n    return this.buildApp(AppClass, options);\n  },\n\n  /**\n   * Helper for building an App and return it\n   *\n   * @private\n   * @method _buildApp\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  _buildApp(AppClass, options) {\n    if(_.isFunction(AppClass)) {\n      return this.buildApp(AppClass, options);\n    }\n    if(_.isObject(AppClass)) {\n      return this._buildAppFromObject(AppClass);\n    }\n  },\n\n  /**\n   * Build an App and return it\n   * Override for dynamic App building\n   *\n   * @public\n   * @method buildApp\n   * @param {App} [AppClass] - An App Class\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  buildApp(AppClass, options) {\n    // options on childApp definition supersede childAppOptions\n    options = _.extend({}, this.childAppOptions, options);\n\n    return new AppClass(options);\n  },\n\n  /**\n   * Internal helper to verify `appName` is unique and not in use\n   *\n   * @private\n   * @method _ensureAppIsUnique\n   * @param {String} appName - Name of app to test\n   * @throws DuplicateChildAppError - Thrown if `App` already has an `appName` registered\n   */\n  _ensureAppIsUnique(appName) {\n    if(this._childApps[appName]) {\n      throw new Marionette.Error({\n        name: 'DuplicateChildAppError',\n        message: `A child App with name \"${ appName }\" has already been added.`\n      });\n    }\n  },\n\n  /**\n   * Add child `App`s to this `App`\n   *\n   * @public\n   * @method addChildApps\n   * @param {Object} childApps - Hash of names and `AppClass` or `appConfig`\n   */\n  addChildApps(childApps) {\n    _.each(childApps, function(childApp, appName) {\n      this.addChildApp(appName, childApp);\n    }, this);\n  },\n\n  /**\n   * Build's childApp and registers it with this App\n   * Starts the childApp, if this app is running and child is `startWithParent`\n   *\n   * @public\n   * @method addChildApp\n   * @param {String} appName - Name of App to register\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @throws AddChildAppError - Thrown if no childApp could be built from params\n   * @returns {App}\n   */\n  addChildApp(appName, AppClass, options) {\n    this._ensureAppIsUnique(appName);\n\n    const childApp = this._buildApp(AppClass, options);\n\n    if(!childApp) {\n      throw new Marionette.Error({\n        name: 'AddChildAppError',\n        message: 'App build failed.  Incorrect configuration.'\n      });\n    }\n\n    childApp._name = appName;\n\n    this._childApps[appName] = childApp;\n\n    // When the app is destroyed remove the cached app.\n    childApp.on('destroy', _.partial(this._removeChildApp, appName), this);\n\n    if(this.isRunning() && _.result(childApp, 'startWithParent')) {\n      childApp.start();\n    }\n\n    return childApp;\n  },\n\n  /**\n   * Returns registered child `App`s name\n   *\n   * @public\n   * @method getName\n   * @returns {String}\n   */\n  getName() {\n    return this._name;\n  },\n\n\n  /**\n   * Returns registered child `App`s array\n   *\n   * @public\n   * @method getChildApps\n   * @returns {Array}\n   */\n  getChildApps() {\n    return _.clone(this._childApps);\n  },\n\n  /**\n   * Returns registered child `App`\n   *\n   * @public\n   * @method getChildApp\n   * @param {String} appName - Name of App to retrieve\n   * @returns {App}\n   */\n  getChildApp(appName) {\n    return this._childApps[appName];\n  },\n\n  /**\n   * Internal helper.  Unregisters child `App`\n   *\n   * @private\n   * @method _removeChildApp\n   * @param {String} appName - Name of App to unregister\n   * @returns {App}\n   */\n  _removeChildApp(appName) {\n    delete this._childApps[appName]._name;\n    delete this._childApps[appName];\n  },\n\n  /**\n   * Removes all childApps and returns them.\n   * The return is useful if any app is using `preventDestroy`\n   *\n   * @public\n   * @method removeChildApps\n   * @returns {Array}\n   */\n  removeChildApps() {\n    const childApps = this.getChildApps();\n\n    _.each(this._childApps, function(childApp, appName) {\n      this.removeChildApp(appName);\n    }, this);\n\n    return childApps;\n  },\n\n  /**\n   * Destroys or removes registered child `App` by name\n   * depending on `preventDestroy`\n   *\n   * @public\n   * @method removeChildApp\n   * @param {String} appName - Name of App to destroy\n   * @param {Object} [options.preventDestroy] - Flag to remove but prevent App destroy\n   * @returns {App}\n   */\n  removeChildApp(appName, options) {\n    options = _.extend({}, options);\n\n    const childApp = this.getChildApp(appName);\n\n    if(!childApp) {\n      return;\n    }\n\n    // if preventDestroy simply unregister the child app\n    if(options.preventDestroy || _.result(childApp, 'preventDestroy')) {\n      this._removeChildApp(appName);\n    } else {\n      childApp.destroy();\n    }\n\n    return childApp;\n  }\n};\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\n /**\n * This provides methods used for registering events while App is running and cleans them up at `onStop`. It's not meant to\n * be used directly.\n *\n * @mixin\n */\n\nexport default {\n  /**\n   * Internal method to stop any registered events.\n   *\n   * @private\n   * @method _stopRunningEvents\n   */\n  _stopRunningEvents() {\n    _.each(this._runningEvents, function(args) {\n      this.off.apply(this, args);\n    }, this);\n  },\n\n  /**\n   * Internal method to stop any registered listeners.\n   *\n   * @private\n   * @method _stopRunningListeners\n   */\n  _stopRunningListeners() {\n    _.each(this._runningListeningTo, function(args) {\n      this.stopListening.apply(this, args);\n    }, this);\n  },\n\n  /**\n   * Overrides `Backbone.Event.on()`\n   * If this `App` is running it will register the event for removal `onStop`\n   *\n   * @public\n   * @method on\n   * @returns {EventListeners}\n   */\n  on() {\n    if(this._isRunning) {\n      this._runningEvents = (this._runningEvents || []);\n      this._runningEvents.push(arguments);\n    }\n\n    return Marionette.Object.prototype.on.apply(this, arguments);\n  },\n\n  /**\n   * Overrides `Backbone.Event.listenTo()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenTo\n   * @returns {EventListeners}\n   */\n  listenTo() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n    return Marionette.Object.prototype.listenTo.apply(this, arguments);\n  },\n\n  /**\n   * Overrides `Backbone.Event.listenToOnce()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenToOnce\n   * @returns {EventListeners}\n   */\n  listenToOnce() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n\n    return Marionette.Object.prototype.listenToOnce.apply(this, arguments);\n  }\n};\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\nimport StateMixin from './mixins/state';\nimport ChildAppsMixin from './mixins/child-apps';\nimport EventListenersMixin from './mixins/event-listeners';\n\nconst ClassOptions = [\n  'startWithParent',\n  'stopWithParent',\n  'startAfterInitialized',\n  'preventDestroy',\n  'StateModel'\n];\n\n/**\n * Marionette.Application with an `initialize` / `start` / `stop` / `destroy` lifecycle.\n *\n * @public\n * @class App\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst App = Marionette.Application.extend({\n\n  /**\n   * Internal flag indiciate when `App` has started but has not yet stopped.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRunning: false,\n\n  /**\n   * Set to true if a parent `App` should not be able to destroy this `App`.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  preventDestroy: false,\n\n  /**\n   * Set to true if `App` should be started after it is initialized.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startAfterInitialized: false,\n\n  /**\n   * Set to true if `App` should be started after its parent starts.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startWithParent: false,\n\n  /**\n   * Set to false if `App` should not stop after its parent stops.\n   *\n   * @type {Boolean|Function}\n   * @default true\n   */\n  stopWithParent: true,\n\n  /**\n   * @public\n   * @constructs App\n   * @param {Object} [options] - Settings for the App.\n   * @param {Boolean} [options.startWithParent]\n   * @param {Boolean} [options.stopWithParent]\n   * @param {Boolean} [options.startAfterInitialized]\n   * @param {Boolean} [options.preventDestroy]\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   */\n  constructor(options = {}) {\n    _.bindAll(this, 'start', 'stop');\n\n    this.mergeOptions(options, ClassOptions);\n\n    this._initChildApps(options);\n\n    Marionette.Application.call(this, options);\n\n    if(_.result(this, 'startAfterInitialized')) {\n      this.start(options);\n    }\n  },\n\n  /**\n   * Internal helper to verify if `App` has been destroyed\n   *\n   * @private\n   * @method _ensureAppIsIntact\n   * @memberOf App\n   * @throws AppDestroyedError - Thrown if `App` has already been destroyed\n   */\n  _ensureAppIsIntact() {\n    if(this._isDestroyed) {\n      throw new Marionette.Error({\n        name: 'AppDestroyedError',\n        message: 'App has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  /**\n   * Gets the value of internal `_isRunning` flag\n   *\n   * @public\n   * @method isRunning\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRunning() {\n    return this._isRunning;\n  },\n\n  /**\n   * Sets the app lifecycle to running.\n   *\n   * @public\n   * @method start\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:start - passes options\n   * @returns {App}\n   */\n  start(options) {\n    this._ensureAppIsIntact();\n\n    if(this._isRunning) {\n      return this;\n    }\n\n    this.triggerMethod('before:start', options);\n\n    const opts = _.extend({}, options);\n    opts.state = this.getInitState(opts.state);\n\n    this.initState(opts);\n\n    this._isRunning = true;\n\n    this.triggerStart(opts);\n\n    return this;\n  },\n\n  /**\n   * Returns state.\n   * Override to extend state\n   *\n   * @public\n   * @method getInitState\n   * @memberOf App\n   * @param {Object} [state] - initial app state\n   * @returns state\n   */\n\n  getInitState(state) {\n    return state;\n  },\n\n  /**\n   * Triggers start event.\n   * Override to introduce async start\n   *\n   * @public\n   * @method triggerStart\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#start - passes options\n   * @returns\n   */\n  triggerStart(options) {\n    this.triggerMethod('start', options);\n  },\n\n  /**\n   * Sets the app lifecycle to not running.\n   * Removes any listeners added during the running state\n   *\n   * @public\n   * @method stop\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:stop - passes options\n   * @event App#stop - passes options\n   * @returns {App}\n   */\n  stop(options) {\n    if(!this._isRunning) {\n      return this;\n    }\n\n    this.triggerMethod('before:stop', options);\n\n    this._isRunning = false;\n\n    this.triggerMethod('stop', options);\n\n    this._stopRunningListeners();\n    this._stopRunningEvents();\n\n    return this;\n  },\n\n  /**\n   * Stops the `App` and sets it destroyed.\n   *\n   * @public\n   * @method destroy\n   * @memberOf App\n   */\n  destroy() {\n    if(this._isDestroyed) {\n      return;\n    }\n\n    this.stop();\n\n    Marionette.Object.prototype.destroy.apply(this, arguments);\n  }\n});\n\n_.extend(App.prototype, StateMixin, ChildAppsMixin, EventListenersMixin);\n\nexport default App;\n","import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\nimport StateMixin from './mixins/state';\n\nconst ClassOptions = [\n  'ViewClass',\n  'viewEventPrefix',\n  'viewOptions',\n  'region'\n];\n/**\n * Reusable Marionette.Object with View management boilerplate\n *\n * @public\n * @class Component\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst Component = Marionette.Object.extend({\n\n  /**\n   * The view class to be managed.\n   * @type {Mn.View|Mn.CollectionView}\n   * @default Marionette.View\n   */\n  ViewClass: Marionette.View,\n\n  /**\n   * Used as the prefix for events forwarded from\n   * the component's view to the component\n   * @type {String}\n   * @default 'view'\n   */\n  viewEventPrefix: 'view',\n\n  /**\n   * Options hash passed to the view when built.\n   * @type {Object|Function}\n   * @default '{}'\n   */\n  viewOptions: {},\n\n  /**\n   * @public\n   * @constructs Component\n   * @param {Object} [options] - Settings for the component.\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   * @param {Mn.View|Mn.CollectionView} [options.ViewClass]\n   * - The view class to be managed.\n   * @param {String} [options.viewEventPrefix]\n   * - Used as the prefix for events forwarded from the component's view to the component\n   * @param {Object} [options.viewOptions] - Options hash passed to an instantiated ViewClass.\n   * @param {Marionette.Region} [options.region] - The region to show the component in.\n   */\n  constructor(options = {}) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    this.initState(options);\n\n    Marionette.Object.call(this, options);\n  },\n\n  /**\n   * Internal flag to determine if the component should destroy.\n   * Set to false while showing the component's view in the component's region.\n   *\n   * @private\n   * @type {Boolean}\n   * @default true\n   */\n  _shouldDestroy: true,\n\n  /**\n   * Set the Component's region and then show it.\n   *\n   * @public\n   * @method showIn\n   * @memberOf Component\n   * @param {Marionette.Region} region - The region for the component\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  showIn(region, viewOptions) {\n    this.region = region;\n\n    this.show(viewOptions);\n\n    return this;\n  },\n\n  /**\n   * Show the Component in its region.\n   *\n   * @public\n   * @event Component#before:show\n   * @event Component#show\n   * @throws ComponentShowError - Thrown if component has already been show.\n   * @throws ComponentRegionError - Thrown if component has no defined region.\n   * @method show\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @memberOf Component\n   * @returns {Component}\n   */\n  show(viewOptions) {\n    const region = this.getRegion();\n\n    if(this._isShown) {\n      throw new Marionette.Error({\n        name: 'ComponentShowError',\n        message: 'Component has already been shown in a region.'\n      });\n    }\n\n    if(!region) {\n      throw new Marionette.Error({\n        name: 'ComponentRegionError',\n        message: 'Component has no defined region.'\n      });\n    }\n\n    this.triggerMethod('before:show');\n\n    this.renderView(viewOptions);\n    this._isShown = true;\n\n    this.triggerMethod('show');\n\n    // Destroy the component if the region is emptied because\n    // it destroys the view\n    this.listenTo(region, 'empty', this._destroy);\n\n    return this;\n  },\n\n  /**\n   * Returns component region.\n   *\n   * @public\n   * @method getRegion\n   * @memberOf Component\n   * @returns Component region\n   */\n  getRegion() {\n    return this.region;\n  },\n\n  /**\n   * Get the Component ViewClass class.\n   * Checks if the `ViewClass` is a view class (the common case)\n   * Then check if it's a function (which we assume that returns a view class)\n   *\n   * @private\n   * @method _getViewClass\n   * @memberOf Component\n   * @param {Object} [options] - Options that can be used to determine the ViewClass.\n   * @returns {View}\n   */\n  _getViewClass(options = {}) {\n    const ViewClass = this.ViewClass;\n\n    if(ViewClass.prototype instanceof Backbone.View || ViewClass === Backbone.View) {\n      return ViewClass;\n    } else if(_.isFunction(ViewClass)) {\n      return ViewClass.call(this, options);\n    }\n\n    throw new Marionette.Error({\n      name: 'InvalidViewClassError',\n      message: '\"ViewClass\" must be a view class or a function that returns a view class'\n    });\n  },\n\n  /**\n   * Shows or re-shows a newly built view in the component's region\n   *\n   * @public\n   * @event Component#before:render:view\n   * @event Component#render:view\n   * @method renderView\n   * @memberOf Component\n   * @param {Object} [options] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  renderView(options) {\n    const ViewClass = this._getViewClass(options);\n\n    const viewOptions = this.mixinOptions(options);\n\n    const view = this.buildView(ViewClass, viewOptions);\n\n    // Attach current built view to component\n    this.currentView = view;\n\n    this._proxyViewEvents(view);\n\n    this.triggerMethod('before:render:view', view);\n\n    // _shouldDestroy is flag that prevents the Component from being\n    // destroyed if the region is emptied by Component itself.\n    this._shouldDestroy = false;\n\n    // Show the view in the region\n    this.getRegion().show(view);\n\n    this._shouldDestroy = true;\n\n    this.triggerMethod('render:view', view);\n\n    return this;\n  },\n\n  /**\n   * Proxies the ViewClass's viewEvents to the Component itself\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _proxyViewEvents\n   * @memberOf Component\n   * @param {Mn.View|Mn.CollectionView} view -\n   * The instantiated ViewClass.\n   */\n  _proxyViewEvents(view) {\n    const prefix = this.viewEventPrefix;\n\n    view.on('all', function() {\n      const args = _.toArray(arguments);\n      const rootEvent = args[0];\n\n      args[0] = `${ prefix }:${ rootEvent }`;\n      args.splice(1, 0, view);\n\n      this.triggerMethod.apply(this, args);\n    }, this);\n  },\n\n  /**\n   * Mixin initial State with any other viewOptions\n   *\n   * @public\n   * @abstract\n   * @method mixinOptions\n   * @memberOf Component\n   * @param {Object} [options] - Additional options to mixin\n   * @returns {Object}\n   */\n  mixinOptions(options) {\n    const viewOptions = _.result(this, 'viewOptions');\n\n    return _.extend({ state: this.getState().attributes }, viewOptions, options);\n  },\n\n  /**\n   * Builds the view class with options\n   * If you need a dynamic ViewClass override this function\n   *\n   * @public\n   * @abstract\n   * @method buildView\n   * @memberOf Component\n   * @param {Mn.View|Mn.CollectionView} ViewClass -\n   * The view class to instantiate.\n   * @param {Object} [viewOptions] - Options to pass to the View\n   * @returns {Mn.View|Mn.CollectionView}\n   */\n  buildView(ViewClass, viewOptions) {\n    return new ViewClass(viewOptions);\n  },\n\n  /**\n   * Destroys Component.\n   *\n   * @private\n   * @method _destroy\n   * @memberOf Component\n   */\n  _destroy() {\n    if(this._shouldDestroy) {\n      Marionette.Object.prototype.destroy.apply(this, arguments);\n    }\n  },\n\n  /**\n   * Empties component's region.\n   *\n   * @private\n   * @method _emptyRegion\n   * @param {Object} [options] - Options passed to `region.empty`\n   * @memberOf Component\n   */\n  _emptyRegion(options) {\n    const region = this.getRegion();\n\n    if(region) {\n      this.stopListening(region, 'empty');\n      region.empty(options);\n    }\n  },\n\n  /**\n   * Empty the region and destroy the component.\n   *\n   * @public\n   * @method destroy\n   * @param {Object} [options] - Options passed to `_emptyRegion` and `destroy`\n   * @memberOf Component\n   */\n  destroy(options) {\n    this._emptyRegion(options);\n\n    this._shouldDestroy = true;\n\n    this._destroy(options);\n  }\n});\n\n_.extend(Component.prototype, StateMixin);\n\nexport default Component;\n","import Marionette from 'backbone.marionette';\n\nimport StateMixin from './mixins/state';\nimport App from './app';\nimport Component from './component';\n\n/**\n * @module Toolkit\n */\n\nconst previousToolkit = Marionette.Toolkit;\n\nconst Toolkit = Marionette.Toolkit = {};\n\nToolkit.noConflict = function() {\n  Marionette.Toolkit = previousToolkit;\n  return this;\n};\n\nToolkit.MixinState = function(classDefinition) {\n  let _StateMixin = StateMixin;\n\n  if(classDefinition.prototype.StateModel) {\n    _StateMixin = _.omit(StateMixin, 'StateModel');\n  }\n\n  _.extend(classDefinition.prototype, _StateMixin);\n};\n\nToolkit.VERSION = '<%VERSION%>';\n\nToolkit.StateMixin = StateMixin;\n\nToolkit.App = App;\n\nToolkit.Component = Component;\n\nexport default Toolkit;\n"],"names":["ClassOptions","StateModel","Backbone","Model","initState","options","mergeOptions","_removeEventHandlers","_getStateModel","_stateModel","state","_setEventHandlers","unbindEvents","stopListening","off","_destroyState","bindEvents","_","result","on","prototype","isFunction","call","Marionette","Error","name","message","setState","set","apply","arguments","resetStateDefaults","defaults","getState","attr","get","_initChildApps","_childApps","childApps","addChildApps","_initListeners","_startChildApps","_stopChildApps","_destroyChildApps","each","childApp","start","stop","startChildApp","appName","getChildApp","stopChildApp","destroy","_buildAppFromObject","appConfig","AppClass","omit","buildApp","_buildApp","isObject","extend","childAppOptions","_ensureAppIsUnique","addChildApp","_name","partial","_removeChildApp","isRunning","getName","getChildApps","clone","removeChildApps","removeChildApp","preventDestroy","_stopRunningEvents","_runningEvents","args","_stopRunningListeners","_runningListeningTo","_isRunning","push","Object","listenTo","listenToOnce","App","Application","startAfterInitialized","startWithParent","stopWithParent","constructor","bindAll","_ensureAppIsIntact","_isDestroyed","triggerMethod","opts","getInitState","triggerStart","StateMixin","ChildAppsMixin","EventListenersMixin","Component","ViewClass","View","viewEventPrefix","viewOptions","_shouldDestroy","showIn","region","show","getRegion","_isShown","renderView","_destroy","_getViewClass","mixinOptions","view","buildView","currentView","_proxyViewEvents","prefix","toArray","rootEvent","splice","attributes","_emptyRegion","empty","previousToolkit","Toolkit","noConflict","MixinState","classDefinition","_StateMixin","VERSION"],"mappings":"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","sourceRoot":"/source/"}